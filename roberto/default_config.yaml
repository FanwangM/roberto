project:
  inplace_env: {}
  name: null
  packages: [
  # Repeat as many as you like. The order may matter.
  # - conda_name: 'name of the conda package'
  #   tools: [] # list, any of the tools defined below
  #   name: '' # python or cpp name, defaults to project.name
  #   path: # root of the package relative to the project root defaults to '.'
  ]

# Custom configuration below this line should be rarely needed.

run:
  echo: true
conda:
  download_path: '${HOME}/Downloads/miniconda.sh'
  linux_url: 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'
  osx_url: 'https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh'
  base_path: '${HOME}/miniconda3'
  pinning: 'python 3.7'  # dependencies to be pinned during testing.
  # The following are set automatically...
  env_name: null  # The name of the conda development environment.
  env_path: null  # The path of the conda development environment.
deploy: false
git:
  # Name of the branch being merged into, may be same as git.branch, if not a PR.
  merge_branch: master
  # The following are set automatically...
  branch: null  # name of the current branch
  describe: null  # output of git describe --tags
  tag: null  # the most recent tag
  tag_version: null  # version name derived from git describe, i.e. major.minor.patch{.post}
  tag_soversion: null  # the so-version, i.e. major.minor
  tag_version_major: null
  tag_version_minor: null
  tag_version_patch: null
  tag_version_suffix: null
  tag_stable: false  # is the current build a stable or main release?
  tag_test: false  # is the current build a test or beta release?
  tag_dev: false  # is the current build a development or alpha release?
  tag_release: false  # is the current build a release

tools:
  write_py_version:
    config:
      template: |
        """Do not edit this file because it will be overwritten before packaging.

        The output of git describe was: {config.git.describe}
        """
        __version__ = '{config.git.tag_version}'
      destination: '{package.path}/{package.name}/version.py'
    commands:
      write_version: []

  write_cmake_version:
    config:
      template: |
        # This file is automatically generated. Changes will be overwritten before packaging.
        set(GIT_DESCRIBE "{config.git.describe}")
        set(GIT_TAG_VERSION "{config.git.tag_version}")
        set(GIT_TAG_SOVERSION "{config.git.tag_soversion}")
        set(GIT_TAG_VERSION_MAJOR "{config.git.tag_version_major}")
        set(GIT_TAG_VERSION_MINOR "{config.git.tag_version_minor}")
        set(GIT_TAG_VERSION_PATCH "{config.git.tag_version_patch}")
      destination: '{package.path}/CMakeListsVersion.txt.in'
    commands:
      write_version: []

  cardboardlint:
    config:
      pip_requirements:
        - git+https://github.com/theochem/cardboardlint.git@master#egg=cardboardlint
      conda_requirements:
        - pycodestyle
        - pydocstyle
        - pylint
        - flake8
        - conda-forge::cppcheck
        - conda-forge::cpplint
        - conda-forge::yamllint
    commands:
      lint_static_master:
        - cardboardlinter -f static
      lint_static_feature:
        - 'cardboardlinter -r {config.git.merge_branch} -f static'
      lint_dynamic_master:
        - cardboardlinter -f dynamic
      lint_dynamic_feature:
        - 'cardboardlinter -r {config.git.merge_branch} -f dynamic'

  pytest:
    config:
      conda_requirements:
        - pytest
        - pytest-cov
    commands:
      test_inplace:
        - >-
          pytest {package.name} -v --cov={package.name} --cov-report xml
          --cov-report term-missing --cov-branch --color=yes
  nose:
    config:
      conda_requirements:
        - nose
        - coverage
    commands:
      test_inplace:
        - rm -f .coverage
        - >-
          nosetests {package.name} -v --detailed-errors --with-coverage
          --cover-package={package.name} --cover-tests --cover-inclusive
          --cover-branches
        - coverage xml -i

  maketest:
    config:
      pip_requirements:
        - gcovr
    commands:
      test_inplace:
        - cd build; find | grep '\\.gcda$' | xargs rm -vf
        - cd build; make test
        - >-
          cd {package.name}; gcovr -r . --gcov-executable ${{HOST}}-gcov
          --object-directory ../build/{package.name}/CMakeFiles/{package.name}.dir

  build_py_inplace:
    config:
      build_inplace_paths:
        PYTHONPATH: '{package.path}/{package.name}'
    commands:
      build_inplace:
        - >-
          python setup.py build_ext -i -L $LD_LIBRARY_PATH
          -I $CPATH --define CYTHON_TRACE_NOGIL

  build_cmake_inplace:
    config:
      build_inplace_paths:
        CPATH: '{package.path}'
        LD_LIBRARY_PATH: '{package.path}/build/{package.name}'
    commands:
      build_inplace:
        - mkdir -p build
        - cd build; cmake .. -DCMAKE_BUILD_TYPE=debug
        - cd build; make

  build_py_source:
    commands:
      build_packages:
        - python setup.py sdist

  build_cmake_source:
    commands:
      build_packages:
        - mkdir -p dist
        - cd dist; cmake .. -DCMAKE_BUILD_TYPE=release
        - cd dist; make sdist

  build_conda:
    config:
      conda_requirements:
        - conda-build
        - conda-verify
    commands:
      build_packages:
        - PROJECT_VERSION={config.git.tag_version} conda build tools/conda.recipe

  deploy_pypi:
    config:
      conda_requirements:
        - twine
      deploy_vars:
        - TWINE_USERNAME
        - TWINE_PASSWORD
      asset_pattern: '{package.path}/dist/{package.name}-{config.tag_version}.*'
      deploy_labels:
        - main
    commands:
      deploy:
        - twine upload {assets}

  deploy_github:
    config:
      conda_requirements:
        - conda-forge::hub
      deploy_vars:
        - GITHUB_TOKEN
      asset_pattern: '{package.path}/dist/{package.name}-{config.tag_version}.*'
      deploy_labels:
        - main
    commands:
      deploy:
        - >-
          hub release create {hub_assets}
          -m "Automatic release of version {config.git.tag_version}"
          {config.git.tag_version}

  deploy_conda:
    config:
      conda_requirements:
        - anaconda-client
      deploy_vars:
        - ANACONDA_API_TOKEN
      asset_pattern: '{config.conda.build_path}/*/{package.name}-{config.tag_version}-*.*'
      deploy_labels:
        - main
        - test
        - dev
    commands:
      deploy:
        - 'anaconda -v upload --force -l {deploy_label} {assets}'
